{"version":3,"file":"static/js/460.e91e6fa0.chunk.js","mappings":"gUAEMA,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAIVC,EAAW,mCAAG,8FAAkBC,EAAAA,EAAAA,IAAU,iEAAkEN,GACpHO,OAAM,SAAUC,GAASC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,SAAY,IADhD,mFAAH,qDAGXC,EAAiB,mCAAG,WAAOC,EAAMC,GAAb,iFAA4BP,EAAAA,EAAAA,IAAA,0DAA6DM,EAA7D,oDAA6GC,GAAQb,GAC7KO,OAAM,SAAUC,GAASC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,SAAY,IAD1C,mFAAH,wDAGjBI,EAAY,mCAAG,WAAOC,GAAP,iFAAoBT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,mBAAqEf,GAChHO,OAAM,SAAUC,GAASC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,SAAY,IAD/C,mFAAH,sDAGZM,EAAY,mCAAG,WAAOD,EAAIE,GAAX,iFAA4BX,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,YAAsDE,EAAtD,mBAA+EjB,GAClIO,OAAM,SAAUC,GAASC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,SAAY,IAD/C,mFAAH,wDAGZQ,EAAW,mCAAG,WAAOH,GAAP,iFAAoBT,EAAAA,EAAAA,IAAA,6CAAgDS,EAAhD,iDAAmGf,GAC7IO,OAAM,SAAUC,GAASC,IAAAA,OAAAA,QAAA,UAA2BD,EAAME,SAAY,IADhD,mFAAH,qD,8ICrBxB,EAA6B,2BAA7B,EAAwE,8BAAxE,EAAsH,8B,SCgCtH,EAzBe,WACX,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KASA,IARAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAG,mCAAG,2GACuCP,EAAAA,EAAAA,IAAY,GAAD,OAAIC,IADtD,oBACAO,KAAQC,EADR,EACQA,UAAWC,EADnB,EACmBA,QAC3BL,EAAU,GAAD,eAAKI,IAAL,OAAmBC,KAFpB,2CAAH,qDAITH,GACH,GAAE,CAACN,IAECG,EAEL,OACI,eAAIO,UAAWC,EAAf,gBACKR,QADL,IACKA,OADL,EACKA,EAAQS,KAAI,YAA0B,IAAZC,EAAW,EAAtBC,UACNC,EAAUF,EAAI,yCAAqCA,GAlBrD,4JAmBJ,OAAO,eAAIH,UAAWC,EAAf,UACH,gBAAKK,IAAKD,EAASE,IAAI,GAAGP,UAAWC,EAAmBO,MAAO,IAAKC,OAAQ,OCP5E,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC5B,EAAI6B,GAWvD,OARE7B,IAFF6B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDM0CG,CAAO,GAGxD,KAGZ,C","sources":["API/api.js","webpack://react-homework-template/./src/components/images/Images.module.css?a35e","components/images/Images.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\nconst options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyZmNkYTc5NGI1YzdhOWU5OTI1OThkNmQ1NTY1ODU5OCIsInN1YiI6IjY0NzExNzBmYmUyZDQ5MDEzM2EzOGE0MSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.jfZ3RR84pJADZLl4dkLKAprXQjhw6uOCeb899-OWaGU'\n    }\n};\n\nexport const getTrending = async () => await axios.get('https://api.themoviedb.org/3/trending/movie/day?language=en-US', options)\n    .catch(function (error) { Notiflix.Notify.failure(`${error.message}`) });\n\nexport const getSearchingMovie = async (find, page) => await axios.get(`https://api.themoviedb.org/3/search/movie?query=${find}&include_adult=false&language=en-US&page=${page}`, options)\n    .catch(function (error) { Notiflix.Notify.failure(`${error.message}`) });\n\nexport const getMovieById = async (id) => await axios.get(`https://api.themoviedb.org/3/movie/${id}?language=en-US`, options)\n    .catch(function (error) { Notiflix.Notify.failure(`${error.message}`) });\n\nexport const getMovieInfo = async (id, option) => await axios.get(`https://api.themoviedb.org/3/movie/${id}/${option}?language=en-US`, options)\n    .catch(function (error) { Notiflix.Notify.failure(`${error.message}`) });\n\nexport const getMovieIMG = async (id) => await axios.get(`https://api.themoviedb.org/3/movie/${id}/images?include_image_language=en&language=en`, options)\n    .catch(function (error) { Notiflix.Notify.failure(`${error.message}`) });\n\n","// extracted by mini-css-extract-plugin\nexport default {\"imagesList\":\"Images_imagesList__9OnRo\",\"imagesListItm\":\"Images_imagesListItm__cxdKa\",\"imagesListImg\":\"Images_imagesListImg__T5Fej\"};","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { getMovieIMG } from 'API/api';\nimport css from './Images.module.css';\nimport { nanoid } from 'nanoid'\n\nconst defaultPicture = `https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg`;\n\nconst Images = () => {\n    const { movieId } = useParams();\n    const [images, setimages] = useState(null)\n    useEffect(() => {\n        const api = async () => {\n            const { data: { backdrops, posters } } = await getMovieIMG(`${movieId}`)\n            setimages([...backdrops, ...posters])\n        };\n        api();\n    }, [movieId])\n\n    if (!images) return\n\n    return (\n        <ul className={css.imagesList}>\n            {images?.map(({ file_path: path }) => {\n                const fullUrl = path ? `https://image.tmdb.org/t/p/w500${path}` : defaultPicture;\n                return <li className={css.imagesListItm} key={nanoid(6)}>\n                    <img src={fullUrl} alt=\"\" className={css.imagesListImg} width={300} height={400} />\n                </li>\n            })}\n        </ul>\n    )\n}\n\nexport default Images","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["options","method","headers","accept","Authorization","getTrending","axios","catch","error","Notiflix","message","getSearchingMovie","find","page","getMovieById","id","getMovieInfo","option","getMovieIMG","movieId","useParams","useState","images","setimages","useEffect","api","data","backdrops","posters","className","css","map","path","file_path","fullUrl","src","alt","width","height","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}